


float l = -0.63;
float t = -0.405;
int iter = 100;
int Mandelbrot(vec2 pos){
  // c = x + yi
  // c^2 = x^2 - y^2 + 2xyi
  // f(z) = z^2 + c
  
  float zr = pos.x;
  float zc = pos.y;
  int n = 0;
  for (;n<iter;++n){
    float zr2 = zr * zr;
    float zc2 = zc * zc;
    float two_zrzc = 2.0 * zr * zc;
    zr = zr2 - zc2 + pos.x;
    zc = two_zrzc + pos.y;
    if(zr2 + zc2 > 16.0){
      break;
    }
    
  }
  
  return  n;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    uv = uv - 0.5;
    
    uv.x = uv.x * iResolution.x / iResolution.y;
    
    uv = uv * 2.0;

    int mdb = Mandelbrot(uv);
    
    vec3 norm = vec3(1.0) * ( 1.0 - ( sqrt( float(mdb) / float(iter) ) ) );
     

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(norm,1.0);
}